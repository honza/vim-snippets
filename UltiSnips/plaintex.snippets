##########
# GLOBAL #
##########

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D',
								'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K',
								'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return '(' + '|'.join(opts) + ')'

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


###############
# ENVIRONMENT #
###############

context "not_math()"
snippet beg "begin{} / end{}" bAi
\begin{$1}
	$2${VISUAL}
\end{$1}$0
endsnippet

context "not_math()"
snippet doc "Document" bAi
\begin{document}
	$1${VISUAL}
\end{document}$0
endsnippet

context "not_math()"
snippet cnt "Center" bAi
\begin{center}
	$1${VISUAL}
\end{center}$0
endsnippet

context "not_math()"
snippet desc "Description" bAi
\begin{description}
	$1${VISUAL}
\end{description}$0
endsnippet

context "not_math()"
snippet lemma "Lemma" bAi
\begin{lemma}
	$1${VISUAL}
\end{lemma}$0
endsnippet

context "not_math()"
snippet prop "Proposition" bAi
\begin{prop}[$1]
	$2${VISUAL}
\end{prop}$0
endsnippet

context "not_math()"
snippet thrm "Theorem" bAi
\begin{theorem}[$1]
	$2${VISUAL}
\end{theorem}$0
endsnippet

context "not_math()"
snippet post "postulate" bAi
\begin{postulate}[$1]
	$2${VISUAL}
\end{postulate}$0
endsnippet

context "not_math()"
snippet prf "Proof" bAi
\begin{proof}[$1]
	$2${VISUAL}
\end{proof}$0
endsnippet

context "not_math()"
snippet def "Definition" bAi
\begin{definition}[$1]
	$2${VISUAL}
\end{definition}$0
endsnippet

context "not_math()"
snippet nte "Note" bAi
\begin{note}[$1]
	$2${VISUAL}
\end{note}$0
endsnippet

context "not_math()"
snippet prob "Problem" bAi
\begin{problem}[$1]
	$2${VISUAL}
\end{problem}$0
endsnippet

context "not_math()"
snippet corl "Corollary" bAi
\begin{corollary}[$1]
	$2${VISUAL}
\end{corollary}$0
endsnippet

context "not_math()"
snippet exm "Example" bAi
\begin{example}[$1]
	$2${VISUAL}
\end{example}$0
endsnippet

context "not_math()"
snippet ntn "Notation" bAi
\begin{notation}[$1]
	$2${VISUAL}
\end{notation}$0
endsnippet

context "not_math()"
snippet rep "Repetition" bAi
\begin{repetition}[$1]
	$2${VISUAL}
\end{repetition}$0
endsnippet

context "not_math()"
snippet prop "Property" bAi
\begin{property}[$1]
	$2${VISUAL}
\end{property}$0
endsnippet

context "not_math()"
snippet int "Intuition" bAi
\begin{intuition}[$1]
	$2${VISUAL}
\end{intuition}$0
endsnippet

context "not_math()"
snippet obs "Observation" bAi
\begin{observation}[$1]
	$1${VISUAL}
\end{observation}$0
endsnippet

context "not_math()"
snippet conc "Conclusion" bAi
\begin{conclusion}[$1]
	$1${VISUAL}
\end{conclusion}$0
endsnippet

context "not_math()"
snippet enum "Enumerate" bAi
\begin{enumerate}
	\item $1${VISUAL}
\end{enumerate}$0
endsnippet

context "not_math()"
snippet item "Itemize" bAi
\begin{itemize}
	\item $1${VISUAL}
\end{itemize}$0
endsnippet

context "not_math()"
snippet case "cases" bAi
\begin{cases}
	$1${VISUAL}
\end{cases}$0
endsnippet

context "not_math()"
snippet ali "Align*" bAi
\begin{align*}
	${VISUAL}${1}
.\end{align*}$0
endsnippet

context "not_math()"
snippet ali "Align" bAi
\begin{align}
	${VISUAL}${1}
.\end{align}$0
endsnippet

context "not_math()"
snippet eqt "Equation" bAi
\begin{equation}
	\begin{split}
		${VISUAL}${1}
	\end{split}
.\end{equation}$0
endsnippet

context "not_math()"
snippet fig "Figure environment" bAi
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}$0
endsnippet

context "not_math()"
snippet tkz "Tikz pgfplot" bAi
endsnippet

context "not_math()"
snippet tab "tabular / array environment" bAi
	\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
		$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}$0
endsnippet

context "not_math()"
snippet tbl "Table environment" bAi
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:${2/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}$0
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" wrAbi
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." wrAbi
endsnippet


###########################
# Inline and Display Math #
###########################

snippet ilm "Inline Math" wA
$${VISUAL}$1$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
\[
	${VISUAL}$1
\].$0
endsnippet


######################################################
# Snippets for fast math typing, from castel.dev		 #
# ASCII math like snippets => =< <= :. ... ** xx |-> #
######################################################

context "math()"
snippet <> "If and only if" Ai
\iff
endsnippet

context "math()"
snippet => "Implies" Ai
\implies
endsnippet

context "math()"
snippet =< "Implied by" Ai
\impliedby
endsnippet

context "math()"
snippet if "If and only if" Ai
\iff
endsnippet

context "math()"
snippet |-> "Mapsto" Ai
\mapsto
endsnippet

context "math()"
snippet +- "Plus minus" Ai
\pm
endsnippet

context "math()"
snippet -+ "Minus plus" Ai
\mp
endsnippet

context "math()"
snippet * "Times" iA
\times
endsnippet

context "math()"
snippet -:- "Divide" iA
\div
endsnippet

snippet ... "Straight dots" Ai
\ldots
endsnippet

snippet .v "Vertical dots" Ai
\vdots
endsnippet

snippet .a "Dots above line" Ai
\cdots
endsnippet

snippet .d "Diagonal dots" Ai
\ddots
endsnippet

snippet :. "Therefore" Ai
\therefore
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet


#####################
# Equality snippets #
#####################

context "math()"
snippet << "Less than" Ai
\ll
endsnippet

context "math()"
snippet >> "Greater than" Ai
\gg
endsnippet

context "math()"
snippet <= "Less than or equal to" Ai
\le
endsnippet

context "math()"
snippet >= "Greater than or equal to" Ai
\ge
endsnippet

context "math()"
snippet != "Not equal to" Ai
\ne
endsnippet

context "math()"
snippet ~= "Approximately" Ai
\approx
endsnippet

context "math()"
snippet === "Equivalent" Ai
\equiv
endsnippet

context "math()"
snippet def= "Defeq" Ai
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet


######################
# Other math symbols #
######################

context "math()"
snippet oo "Infinity" Ai
\infty
endsnippet

context "math()"
snippet oc "Proportional" Ai
\propto
endsnippet


#############################################
# Sub and superscript. use only in math env #
#############################################

context "math()"
snippet '([A-Za-z])(\d)' "Auto subscript 1" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "Auto subscript 2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])_\{(\d+)\}(\d)' "Auto subscript 3+" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) + match.group(3)`}
endsnippet

context "math()"
snippet sq "Square" iA
^2
endsnippet

context "math()"
snippet cb "Cube" iA
^3
endsnippet

context "math()"
snippet compl "Complement" iA
^{c}
endsnippet

context "math()"
snippet inv "Inverse" iA
^{-${1:1}}$0
endsnippet

context "math()"
snippet ss "Superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet sr "Square root" iA
\sqrt{$1}$0
endsnippet

context "math()"
snippet nr "n Root" iA
\sqrt[$1]{$2}$0
endsnippet


#############
# Fractions #
#############

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


###########################################################################
# Over text type snippets, i.e. v., => \vec{v}, xdot => \dot{x}, vddot => #
# \ddot{v}																																#
###########################################################################

context "math()"
snippet "bar" "Bar" ri
\overline{$1}$0
endsnippet

context "math()"
snippet "([a-zA-Z])bar" "Bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

context "math()"
snippet "([a-zA-Z])hat" "Hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-ce-zA-Z])dot" "Dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet


#########################
# Sums and Products etc #
#########################

context "math()"
snippet sum "Sum" wA
\sum_{${1:n = 1}}^{${2:\infty}}
endsnippet

context "math()"
snippet prod "Product" wA
\prod_{$1}^{$2}$0
endsnippet

context "math()"
snippet taylor "Taylor series" wA
\sum_{n=0}^{\infty} \frac{${1:f^{(n)}(0)} \cdot ${2:x^n}}{${3:n!}}$0
endsnippet


############
# Calculus #
############

context "math()"
snippet int "Indefinite integral" wA
\int $0 d${1:x}
endsnippet

context "math()"
snippet dint "Definite integral" wA
\int_{$1}^{$2} $0 d${3:x}
endsnippet

context "math()"
snippet lim "Limit" wA
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet odx "d/dx" wA
\od{$1}{x} $0
endsnippet

context "math()"
snippet ody "d/dx" wA
\od{$1}{y} $0
endsnippet

context "math()"
snippet odt "d/dx" wA
\od{$1}{t} $0
endsnippet

context "math()"
snippet od "d/dx" wA
\od[$1]{$2}{$3} $0
endsnippet

context "math()"
snippet pd "d/dx" wA
\pd[$1]{$2}{$3} $0
endsnippet

context "math()"
snippet md "d/dx" wA
\md{$1}{$2}$0
endsnippet

context "math()"
snippet eval "Eval int" wA
\eval{$3}_{$1}^{$2}
endsnippet

context "math()"
snippet nab "Nabla" wA
\nabla
endsnippet

context "math()"
snippet grad "Nabla" wA
\nabla
endsnippet


#################
# Real Analysis #
#################

context "math()"
snippet ext "Exists" wA
\exists
endsnippet

context "math()"
snippet next "Exists" wA
\nexists
endsnippet

context "math()"
snippet lt "Lnot" wA
\lnot
endsnippet

context "math()"
snippet ld "Land" wA
\land
endsnippet

context "math()"
snippet for "For all" wA
\forall
endsnippet

context "math()"
snippet qd "Quad" wA
\quad
endsnippet

context "math()"
snippet mb "Mathbb" wA
\mathbb{$1}$0
endsnippet

context "math()"
snippet inn "In" wA
\in
endsnippet

context "math()"
snippet RR "Real numbers" wA
\mathbb{R}
endsnippet

context "math()"
snippet ZZ "Integer numbers" wA
\mathbb{Z}
endsnippet

context "math()"
snippet NN "Natural numbers" wA
\mathbb{N}
endsnippet

context "math()"
snippet QQ "Rational numbers" wA
\mathbb{Q}
endsnippet

context "math()"
snippet PP "Irrational numbers" wA
\mathbb{P}
endsnippet


########################
# Matrices and Vectors #
########################

context "math()"
snippet mat "Matrix"
\begin{bmatrix}
$0
\end{bmatrix}
endsnippet

context "math()"
snippet det "Determinant matrix"
\begin{vmatrix}
$0
\end{vmatrix}
endsnippet

context "math()"
snippet vec "Vector"
\begin{pmatrix}
$0
\end{pmatrix}
endsnippet

context "math()"
snippet matil "Inline matrix"
\left[ \begin{smallmatrix}
$0
\end{smallmatrix} \right]
endsnippet

context "math()"
snippet detil "Inline determinant"
\left| \begin{smallmatrix}
$0
\end{smallmatrix} \right|
endsnippet

context "math()"
snippet vecil "Inline vector"
\left( \begin{smallmatrix}
$0
\end{smallmatrix} \right)
endsnippet

context "math()"
snippet choose "n choose p"
{${1:n} \choose ${2:p}} $0
endsnippet


#############################################
# (), [], {}, and their bigger Counterparts #
#############################################

context "math()"
snippet () "Parenthesis" i
\left($1\right)$0
endsnippet

context "math()"
snippet {} "Parenthesis" i
\left\{$1\right\}$0
endsnippet

context "math()"
snippet [] "Parenthesis" i
\left\[$1\right\]$0
endsnippet

context "math()"
snippet ( "Left(" i
\left(
endsnippet

context "math()"
snippet ) "Right)" i
\right)
endsnippet

context "math()"
snippet { "Left{" i
\left{
endsnippet

context "math()"
snippet } "Right}" i
\right}
endsnippet

context "math()"
snippet [ "Left[" i
\left[
endsnippet

context "math()"
snippet ] "Right]" i
\right]
endsnippet


########
# Tikz #
########

context "env('tikzpicture')"
snippet circ "Draw circle" bAi
\draw (${1:0,0}) circle ${2:[radius=1]};
endsnippet

context "env('tikzpicture')"
snippet elps "Draw ellipse" bAi
\draw (${1:0,0}) circle [x radius=${2:4},
										y radius=${3:5}];
endsnippet

context "env('tikzpicture')"
snippet arc "Draw arc" bAi
\draw (${1:0,0}) arc [x radius=${2:4},
								 y radius=${3:5},
								 start angle=${4:0},
								 end angle=${5:90}];
endsnippet

context "env('tikzpicture')"
snippet line "Draw line" bAi
\draw (${1:0,0}) -- (${2:1,1});
endsnippet

context "env('tikzpicture')"
snippet multline "Draw multiple lines" bAi
\draw (${1:0,0})	-- (${2:1,1})
						-- (${3:2,2})
						-- cycle;
endsnippet

context "env('tikzpicture')"
snippet rect "Draw rectangle" bAi
\draw (${1:0,0}) rectangle[${2:fill=white}] (${3:1,1});
endsnippet

context "env('tikzpicture')"
snippet node "Draw node" bAi
\draw (${1:0,0}) node[fill=${2:white}, anchor=${3:center}] {${4:text}};
endsnippet

context "env('tikzpicture')"
snippet rgb "Draw rgb color" bAi
rgb,255:red,${1:21}; green,${2:66}; blue:${3:128}
endsnippet

context "env('tikzpicture')"
snippet mix "Draw mixed color" bAi
${1:blue}!${2:0}!${3:white}
endsnippet

context "env('tikzpicture')"
snippet colors "All colors" bAi
$1`!p snip.rv = complete(t[1], ['red', 'yellow', 'green', 'cyan', 'blue',
'voilet', 'magenta', 'brown', 'lime', 'olive', 'orange', 'pink', 'purple',
'teal', 'white', 'lightgray', 'gray', 'darkgray', 'black'])`
endsnippet

context "env('tikzpicture')"
snippet thickness "Line thickness" bA
$1`!p snip.rv = complete(t[1], ['ultra thin', 'very thin', 'thin', 'semithick',
'thick', 'very thick', 'ultra thick', 'line width='])`
endsnippet

context "env('tikzpicture')"
snippet styles "Line styles" bA
$1`!p snip.rv = complete(t[1], ['solid', 'double', 'dotted', 'loosely dotted',
'densely dotted', 'dashed', 'lossely dashed', 'densely dashed', 'dashdotted',
'lossely dashdotted', 'densely dashdotted'])`
endsnippet

context "env('tikzpicture')"
snippet tips "Arrow tips" bA
$1`!p snip.rv = complete(t[1], ['<-', '->', '<->', '<<->>', '>-<', '<>-><'])`
endsnippet

context "env('tikzpicture')"
snippet join "Joining" bA
$1`!p snip.rv = complete(t[1], ['mitre', 'bevel', 'round'])`
endsnippet

context "env('tikzpicture')"
snippet bend "Bend" bA
$1`!p snip.rv = complete(t[1], ['left', 'right])`
endsnippet

context "env('tikzpicture')"
snippet coordinates "Graph the Coordinates" bA
\begin{figure}[h]
	\begin{tikzpicture}
		\tkzInit[xmax=${1:6},ymax=${2:6},xmin=${3:-6},ymin=${4:-6}]
		\tkzGrid
		\tkzAxeXY
		\tkzText[above](0,6.75){${5:Title of the Coordinate Graph}}
	\end{tikzpicture}
\end{figure}
endsnippet


###########
# Qed Qea #
###########

snippet qed "Q.E.D." wA
Q.E.D.
endsnippet

snippet qea "Q.E.A." wA
Q.E.A.
endsnippet


###########
# Lessons #
###########

snippet les "Lesson"
\lesson{${1:LESSON NUMBER}}{`date "+%b %d %Y %a (%H:%M:%S)"`}{${3:LESSON NAME}}{Unit ${4:UNIT NUMBER}}
$0
endsnippet

snippet lec "Lecture"
\lecture{${1:LECTURE NUMBER}}{`date "+%b %d %Y %a (%H:%M:%S)"`}{${3:LECTURE NAME}}
$0
endsnippet


############
# Sections #
############

snippet chap "Chapter" wi
\chapter{${VISUAL}$1}
\label{chap:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% chapter $2 (end)

\newpage
endsnippet

snippet sec "Subsection" wi
\section{${VISUAL}$1}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% section $2 (end)
endsnippet

snippet sec* "Subsection" wi
\section*{${VISUAL}$1}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% section $2 (end)
endsnippet

snippet sub "Subsection" wi
\subsection{${VISUAL}$1}
\label{sub_sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subsection $2 (end)
endsnippet

snippet sub* "Subsection" wi
\subsection*{${VISUAL}$1}
\label{sub_sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subsection $2 (end)
endsnippet

snippet subsub "Subsubsection" wi
\subsubsection{${VISUAL}$1}
\label{sub_sub_sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subsubsection $2 (end)
endsnippet

snippet subsub* "Subsubsection" wi
\subsubsection*{${VISUAL}$1}
\label{sub_sub_sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subsubsection $2 (end)
endsnippet

snippet par "Paragraph" wi
\paragraph{${VISUAL}$1}
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% paragraph $2 (end)
endsnippet

snippet par* "Paragraph" wi
\paragraph*{${VISUAL}$1}
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% paragraph $2 (end)
endsnippet

snippet subpar "Paragraph" wi
\subparagraph{${VISUAL}$1}
\label{sub_par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subparagraph $2 (end)
endsnippet

snippet subpar* "Paragraph" wi
\subparagraph*{${VISUAL}$1}
\label{sub_par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${3:Some text here}

% subparagraph $2 (end)
endsnippet


#############
# Text Edit #
#############

snippet bf "Bold"
\textbf{${VISUAL}$1}$0
endsnippet

snippet it "Italic"
\textit{${VISUAL}$1}$0
endsnippet

snippet un "Underline"
\underline{${VISUAL}$1}$0
endsnippet

context "math()"
snippet rm "Text"
\textrm{${VISUAL}$1}$0
endsnippet


############
# Preamble #
############

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet


##################################################################################
# Run code straight from the latex file, such as sympy, maybe eval or matplotlib #
##################################################################################

# Sympy

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n, p = symbols('k m n p', integer=True)
f, g, h, u, v = symbols('f g h u v', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

# Mathematica

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet


#############
# Chemistry #
#############

snippet react "Reaction" bA
\reaction{$1}
endsnippet

snippet *react "Reaction no num" bA
\reactionstar{$1}
endsnippet

snippet ce "ce" w
\ce{$1} $0
endsnippet

snippet CH2 "C with H on top and bottom" w
C([2]-H)([6]-H)
endsnippet

snippet COOH "Carboxyl" w
C([1]=O)([7]-OH)
endsnippet

snippet CH=O "Aldehyde" w
C([1]=O)([7]-H)
endsnippet

snippet CHO "Carbonyl" w
C([2]=O)
endsnippet

snippet CH-OH "Hydroxide" w
C([2]-OH)([6]-H)
endsnippet

snippet CONH2 "Carboxyamide" w
C([1]=O)([7]-N([1]-H)([7]-H))
endsnippet

snippet COOC "Ester" w
C([1]=O)[7]-O-C
endsnippet


#########
# Other #
#########

snippet date "Today's date and Current Time"
`date "+%b %d %Y %a (%H:%M:%S)"`
endsnippet

snippet sign "Signature"
Yours sincerely,

${VISUAL}$1
endsnippet

snippet ref "Reference" wi
${1:Figure}~\ref{${1:Fig}:$2:${VISUAL}}$0
endsnippet

snippet link "Hyperlink" wi
\hyperlink{${VISUAL}$1}{${2:text}}$0
endsnippet

context "env('enumerate')
snippet itm "New Item" A
\item ${VISUAL}$1
endsnippet

context "env('itemize')
snippet itm "New Item" A
\item ${VISUAL}$1
endsnippet

snippet box "Create box"
\boxed{${VISUAL}$1}$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
endsnippet

snippet newp "New Page" A
\newpage$0
endsnippet

